package kr.co.jaehyeon.main;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import kr.co.jaehyeon.beans.TestBean1;
import kr.co.jaehyeon.beans.TestBean2;
import kr.co.jaehyeon.config.BeanConfigClass;

public class MainClass {

	public static void main(String[] args) {
		//xml을 사용하는 방식
		ClassPathXmlApplicationContext ctx1 = new ClassPathXmlApplicationContext("kr/co/jaehyeon/config/beans.xml");
		TestBean1 xml1 = ctx1.getBean("xml1",TestBean1.class);
		System.out.printf("xml1 : %s\n",xml1);
		
		TestBean1 xml11 = ctx1.getBean("xml1",TestBean1.class);
		System.out.printf("xml11 : %s\n",xml11);
		//id가 같은 빈을 가지고 왔다. 싱글톤이기 때문에 똑같은 객체의 주소값을 가지고 온다. 객체생성은 로딩될 때(ctx1을 만들 때) 된다.
		
		System.out.println("-------------------------");
		TestBean2 xml2 = ctx1.getBean("xml2",TestBean2.class);
		System.out.printf("xml2 : %s\n", xml2);
		TestBean2 xml22 = ctx1.getBean("xml2",TestBean2.class);
		System.out.printf("xml22 : %s\n", xml22);
		
		ctx1.close();
		
		
		System.out.println("====================================");
		//자바파일을 사용하는 방식
		AnnotationConfigApplicationContext ctx2 = new AnnotationConfigApplicationContext(BeanConfigClass.class);
		TestBean1 java1 = ctx2.getBean("java1",TestBean1.class);
		System.out.printf("java1 : %s\n",java1);
		
		TestBean1 java11 = ctx2.getBean("java1",TestBean1.class);
		System.out.printf("java11 : %s\n",java11);
		//id가 같은 빈을 가지고 왔다. 싱글톤이기 때문에 똑같은 객체의 주소값을 가지고 온다. 객체생성은 로딩될 때(ctx2 만들때) 된다.
		
		
		//TestBean1 java500 = ctx2.getBean("java500",TestBean1.class);
		TestBean1 java500 = ctx2.getBean("java600",TestBean1.class);
		System.out.printf("java500 : %s\n",java500);
		ctx2.close();
		

	}

}
