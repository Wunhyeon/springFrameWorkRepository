package kr.co.jaehyeon.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import kr.co.jaehyeon.beans.TestBean1;
import kr.co.jaehyeon.beans.TestBean2;

@Configuration
public class BeanConfigClass {

	/*
	 * xml파일의 경우 정해진 대로만 작업을 해야하지만, 자바파일의 경우, 값을 주입한다던가 이런 방식들은 정해져 있지만, 주입할 값들을 구하는
	 * 데 있어서 약간의 작업을 추가적으로 할 수 있는 장점을 가지고 있다.
	 */
	@Bean
	public TestBean1 java1() {
		TestBean1 t1= new TestBean1();
		return t1;
		
		/*
		 * MainClass에서 BeanConfigClass(현재 이 파일)를 Context를 만들어놨다. 그럼 이 파일에 세팅해 놓은 이 어노테이션
		 * 데이터들을 확인을 하게 된다. @Bean어노테이션을 만들어 놓게 되면, 여기에서 Bean을 정의해 놓았구나 하고 판단을 하게 된다. 그래서
		 * 이 메소드를 자동으로 호출하게 되고, 이 메소드가 반환하는 객체의 주소값을 스프링 프레임워크에서 가지고 있게 된다.
		 */
		
		/*
		 * 여기서 등록한 bean을 가져가는법은 이 메소드의 이름(java1)이 bean의 아이디가 된다.(xml에서는 id를 따로 지정해줘야
		 * 했다.) 이 메소드가 java1이기 때문에 MainClass에서 getBean()할 때 java1이라고 명시해주면, 여기에서 반환했던
		 * bean객체 주소값을 가지고 반환을 해주게 된다. 이 메소드가 호출 되는 것이 아니다.(이미 이 메소드는 호출되서 bean객체에 주소값을
		 * 가지고 있게 된다.) 그리고 나서 메소드의 이름을 가지고 getBean()을 하게 되면, 해당 Bean객체의 이름을 가지고 와서 사용할 수
		 * 있게 되는 것이다.
		 */
	}
	
	@Bean(name="java600")	//이 메소드가 반환하는 bean 객체의 이름이 이제는 메소드의 이름으로 등록되는 게 아니라, name에서 지정한 값으로 등록이 된다.
	public TestBean1 java500() {
		TestBean1 t1 = new TestBean1();
		return t1;
	}
	
	@Bean
	public TestBean2 java2() {
		TestBean2 t2 = new TestBean2();
		return t2;
	}
}
